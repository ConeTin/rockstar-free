package ru.rockstar.client.features.impl.combat;

import java.awt.Color;
import java.util.ArrayList;
import java.util.Comparator;
import java.util.List;
import java.util.Objects;

import org.lwjgl.input.Mouse;
import org.lwjgl.opengl.GL11;

import net.minecraft.block.Block;
import net.minecraft.block.BlockLiquid;
import net.minecraft.client.Minecraft;
import net.minecraft.client.gui.ScaledResolution;
import net.minecraft.client.renderer.GlStateManager;
import net.minecraft.entity.Entity;
import net.minecraft.entity.EntityLivingBase;
import net.minecraft.entity.item.EntityArmorStand;
import net.minecraft.entity.item.EntityEnderCrystal;
import net.minecraft.entity.monster.EntityMob;
import net.minecraft.entity.passive.EntityAnimal;
import net.minecraft.entity.passive.EntityVillager;
import net.minecraft.entity.player.EntityPlayer;
import net.minecraft.item.ItemAxe;
import net.minecraft.item.ItemShield;
import net.minecraft.item.ItemSword;
import net.minecraft.network.play.client.CPacketEntityAction;
import net.minecraft.network.play.client.CPacketHeldItemChange;
import net.minecraft.network.play.client.CPacketPlayerDigging;
import net.minecraft.network.play.client.CPacketUseEntity;
import net.minecraft.network.play.server.SPacketPlayerPosLook;
import net.minecraft.util.EnumFacing;
import net.minecraft.util.EnumHand;
import net.minecraft.util.math.BlockPos;
import net.minecraft.util.math.MathHelper;
import net.minecraft.util.math.Vec3d;
import ru.rockstar.Main;
import ru.rockstar.api.event.EventTarget;
import ru.rockstar.api.event.event.EventAttackSilent;
import ru.rockstar.api.event.event.EventPacket;
import ru.rockstar.api.event.event.EventPreMotionUpdate;
import ru.rockstar.api.event.event.EventRender2D;
import ru.rockstar.api.event.event.EventSendPacket;
import ru.rockstar.api.event.event.EventUpdate;
import ru.rockstar.api.utils.combat.EntityHelper;
import ru.rockstar.api.utils.combat.GCDFix;
import ru.rockstar.api.utils.combat.KillAuraHelper;
import ru.rockstar.api.utils.combat.Point;
import ru.rockstar.api.utils.combat.RangeHelper;
import ru.rockstar.api.utils.combat.RotationHelper;
import ru.rockstar.api.utils.friend.Friend;
import ru.rockstar.api.utils.math.GCDCalcHelper;
import ru.rockstar.api.utils.math.MathematicHelper;
import ru.rockstar.api.utils.movement.MovementHelper;
import ru.rockstar.api.utils.other.Util;
import ru.rockstar.api.utils.render.AnimationHelper;
import ru.rockstar.api.utils.render.ClientHelper;
import ru.rockstar.api.utils.render.DrawHelper;
import ru.rockstar.api.utils.render.RenderUtils;
import ru.rockstar.api.utils.render.RoundedUtil;
import ru.rockstar.api.utils.world.InventoryHelper;
import ru.rockstar.client.features.Category;
import ru.rockstar.client.features.Feature;
import ru.rockstar.client.features.impl.movement.Jesus;
import ru.rockstar.client.ui.draggable.DraggableModule;
import ru.rockstar.client.ui.draggable.impl.TargetHudComponent;
import ru.rockstar.client.ui.settings.impl.BooleanSetting;
import ru.rockstar.client.ui.settings.impl.ListSetting;
import ru.rockstar.client.ui.settings.impl.NumberSetting;

public class Aura extends Feature {
	
	public static BooleanSetting crysSafe;
	public static BooleanSetting invisiblecheck;
	public static BooleanSetting auramobs;
	public static EntityLivingBase target ;
	public static BooleanSetting predict;
	public static BooleanSetting targetHud;
	public static BooleanSetting snap;
	public static BooleanSetting smartFix;
	public static BooleanSetting dynamicRange;
	public static NumberSetting range2;
	public static float range;
	public static int hitCounter;
	   public static float progress;
	    public static float progress2;
	    private long lastMS;
	    public static double healthBarWidth;
    public Aura() {
        super("Aura", "Новая килл-аура", 0, Category.COMBAT);
        crysSafe = new BooleanSetting("Crystal Safe", true, () -> true);
        dynamicRange = new BooleanSetting("Dynamic Range", "Динамическая дистанция", false, () -> true);
        range2 = new NumberSetting("Range", "Дистанция для удара", 3.2f, 1, 6, 0.1f, () -> !dynamicRange.getBoolValue());
        predict = new BooleanSetting("Predict", "Предиктиться", false, () -> true);
        snap = new BooleanSetting("Snap", "Под нексус гриф", false, () -> true);
        smartFix = new BooleanSetting("Smart Fix", "Использует шелд фикс по другому, полезно для дуэлей", true, () -> true);
        auramobs = new BooleanSetting("Mobs", "Позволяет бить мобов", true, () -> true);
        invisiblecheck = new BooleanSetting("Invisible", "Позволяет бить невидемых существ", true, () -> true);
        addSettings(auramobs, dynamicRange, range2, invisiblecheck, smartFix, snap, crysSafe);
    }
    
    public boolean canAttack(EntityLivingBase player) {
    	 if (player instanceof EntityPlayer || player instanceof EntityAnimal || player instanceof EntityMob
                 || player instanceof EntityVillager) {
             if (player instanceof EntityAnimal && !auramobs.getBoolValue()) {
                 return false;
             }
             if (player instanceof EntityMob && !auramobs.getBoolValue()) {
                 return false;
             }

             if (player instanceof EntityVillager && !auramobs.getBoolValue()) {
                 return false;
             }
         }
        if (player.isInvisible() && !invisiblecheck.getBoolValue()) {
            return false;
        }
        if (player instanceof EntityArmorStand) {
            return false;
        }

        for (Friend friend : Main.instance.friendManager.getFriends()) {
            if (!player.getName().equals(friend.getName())) {
            	continue;
            } else {
            	return false;
            }
        }

        if (Main.instance.featureDirector.getFeatureByClass(AntiBot.class).isToggled() && AntiBot.isBotPlayer.contains(player)) {
            return false;
        }
        if (!range(player, calculateRange())) {
            return false;
        }
        return player != mc.player;
    }
    
    private static boolean range(EntityLivingBase entity, double range) {
        mc.player.getDistanceToEntity(entity);
        return (double) mc.player.getDistanceToEntity(entity) <= range;
    }
    
    public float calculateRange() {
    	float y = range;
    	if (this.isToggled()) {
			if (dynamicRange.getBoolValue()) {
				if (hitCounter <= 7) {
					range = 3.5f;
				} else {
					range = 3.1f;
				}
			} else {
				range = range2.getNumberValue();
			}
			
			if (target != null) {
    			if (mc.player.posY < target.posY) {
    				y = (float) (range + (target.posY - mc.player.posY));
    			} else if (mc.player.posY == target.posY) {
    				y = range;
    			} else {
    				y = (float) (range + (mc.player.posY - target.posY));
    			}
    		}
			
			return y;
		} else {
			return 0;
		}
	}
    
    @EventTarget
    public void onSendPacket(EventSendPacket event) {
        if (event.getPacket() instanceof CPacketUseEntity) {
            CPacketUseEntity cPacketUseEntity = (CPacketUseEntity) event.getPacket();

            if (cPacketUseEntity.getAction() == CPacketUseEntity.Action.INTERACT) {
                event.setCancelled(true);
            }

            if (cPacketUseEntity.getAction() == CPacketUseEntity.Action.INTERACT_AT) {
                event.setCancelled(true);
            }
        }
    }
    
    public static float[] rotations(Entity entityIn) {
    	/*
        double diffX = entityIn.posX + ((entityIn.posX - entityIn.prevPosX)) * (predict.getBoolValue() ? mc.player.connection.getPlayerInfo(mc.player.getUniqueID()).getResponseTime() / 2 : 0)  - mc.player.posX - mc.player.motionX * (predict.getBoolValue() ? mc.player.connection.getPlayerInfo(mc.player.getUniqueID()).getResponseTime() / 2 : 0);
        double diffZ = entityIn.posZ + ((entityIn.posZ - entityIn.prevPosZ))  * (predict.getBoolValue() ? mc.player.connection.getPlayerInfo(mc.player.getUniqueID()).getResponseTime() / 2 : 0) - mc.player.posZ - mc.player.motionZ * (predict.getBoolValue() ? mc.player.connection.getPlayerInfo(mc.player.getUniqueID()).getResponseTime() / 2 : 0);
        double diffY = (entityIn instanceof EntityLivingBase) ? (entityIn.posY + entityIn.getEyeHeight() - (mc.player.posY + mc.player.getEyeHeight()) - ((KillAura.walls.getBoolValue() && !((EntityLivingBase)entityIn).canEntityBeSeen((Entity)mc.player)) ? -0.38 : ((0.25)))) : ((1 + 1) / 2.0 - (mc.player.posY + mc.player.getEyeHeight()));
        final double diffXZ = MathHelper.sqrt(diffX * diffX + diffZ * diffZ);
        float yaw = (float)(Math.atan2(diffZ, diffX) * 180.0 / 3. - 90.0);
        float pitch = (float)(-(Math.atan2(diffY, diffXZ) * 180.0 / ((KillAura.walls.getBoolValue() && !((EntityLivingBase)entityIn).canEntityBeSeen((Entity)mc.player)) ? 3.1 : (3.))));
        yaw = mc.player.rotationYaw + GCDCalcHelper.getFixedRotation(MathHelper.wrapDegrees(yaw - mc.player.rotationYaw));
        pitch = mc.player.rotationPitch + GCDCalcHelper.getFixedRotation(MathHelper.wrapDegrees(pitch - mc.player.rotationPitch));
        final float minValue = -90.0f;
        final float maxValue = 90.0f;
        pitch = MathHelper.clamp(pitch, minValue, maxValue);
        return new float[]{yaw, pitch};
         */
    	
    	Point q1 = new Point(entityIn.posX, entityIn.posY + 1, entityIn.posZ);
    	Point q0 = new Point(entityIn.posX, entityIn.posY, entityIn.posZ);
    	Point q2 = new Point(entityIn.posX, entityIn.posY - 1, entityIn.posZ);
    	
    	Point q3 = new Point(entityIn.posX - 0.2, entityIn.posY - 1, entityIn.posZ - 0.2);
    	Point q4 = new Point(entityIn.posX - 0.2, entityIn.posY - 1, entityIn.posZ + 0.2);
    	Point q5 = new Point(entityIn.posX + 0.2, entityIn.posY - 1, entityIn.posZ - 0.2);
    	Point q6 = new Point(entityIn.posX + 0.2, entityIn.posY - 1, entityIn.posZ + 0.2);
    	
    	Point q7 = new Point(entityIn.posX - 0.2, entityIn.posY + 1, entityIn.posZ - 0.2);
    	Point q8 = new Point(entityIn.posX - 0.2, entityIn.posY + 1, entityIn.posZ + 0.2);
    	Point q9 = new Point(entityIn.posX + 0.2, entityIn.posY + 1, entityIn.posZ - 0.2);
    	Point q10 = new Point(entityIn.posX + 0.2, entityIn.posY + 1, entityIn.posZ + 0.2);
    	
    	Point q11 = new Point(entityIn.posX - 0.2, entityIn.posY, entityIn.posZ - 0.2);
    	Point q12 = new Point(entityIn.posX - 0.2, entityIn.posY, entityIn.posZ + 0.2);
    	Point q13 = new Point(entityIn.posX + 0.2, entityIn.posY, entityIn.posZ - 0.2);
    	Point q14 = new Point(entityIn.posX + 0.2, entityIn.posY, entityIn.posZ + 0.2);
    	
    	
    	
    	final List<Point> p = new ArrayList<Point>();
    	
    	p.add(q1);
    	p.add(q2);
    	p.add(q0);
    	
    	p.add(q3);
    	p.add(q4);
    	p.add(q5);
    	p.add(q6);
    	
    	p.add(q7);
    	p.add(q8);
    	p.add(q9);
    	p.add(q10);
    	
    	p.add(q11);
    	p.add(q12);
    	p.add(q13);
    	p.add(q14);
    	
    	
    	p.sort(Comparator.comparingDouble(mc.player::getDistanceToPoint));
    	
    	
        Vec3d eyesPos = new Vec3d(mc.player.posX + MathematicHelper.randomizeFloat(-1, 2) / 15, mc.player.posY + (double) mc.player.getEyeHeight() - 0.6, mc.player.posZ + MathematicHelper.randomizeFloat(-1, 2) / 15);
        double diffY = /*entityIn.getPositionVector().yCoord - eyesPos.yCoord*/ p.get(0).getY() - eyesPos.yCoord;
        double diffX = p.get(0).getX() + ((p.get(0).getX() - entityIn.prevPosX)) * (predict.getBoolValue() ? mc.player.connection.getPlayerInfo(mc.player.getUniqueID()).getResponseTime() / 2 : 0)  - mc.player.posX - mc.player.motionX * (predict.getBoolValue() ? mc.player.connection.getPlayerInfo(mc.player.getUniqueID()).getResponseTime() / 2 : 0);
        double diffZ = p.get(0).getZ() + ((p.get(0).getZ() - entityIn.prevPosZ))  * (predict.getBoolValue() ? mc.player.connection.getPlayerInfo(mc.player.getUniqueID()).getResponseTime() / 2 : 0) - mc.player.posZ - mc.player.motionZ * (predict.getBoolValue() ? mc.player.connection.getPlayerInfo(mc.player.getUniqueID()).getResponseTime() / 2 : 0);
        double diffXZ = Math.sqrt(diffX * diffX + diffZ * diffZ);
        float yaw = MathHelper.wrapDegrees((float) Math.toDegrees(Math.atan2(diffZ, diffX)) - 90.0f);
        float pitch = MathHelper.wrapDegrees((float) (-Math.toDegrees(Math.atan2(diffY, diffXZ))) - 10.0f);
        float f = mc.gameSettings.mouseSensitivity * 0.6f + 0.2f ;
        float gcd = f * f * f * 1.2f;
        yaw -= yaw % gcd;
        pitch -= pitch % gcd;
        return new float[]{yaw, pitch};
    }
    
    @EventTarget
    public void onAttackSilent(EventAttackSilent eventAttackSilent) {
    	if (hitCounter <= 1 && smartFix.getBoolValue()) {
  		  return;
  	  }
  	  if (mc.player.isBlocking() && mc.player.getHeldItemOffhand().getItem() instanceof ItemShield) {
        	mc.player.connection.sendPacket(new CPacketPlayerDigging(CPacketPlayerDigging.Action.RELEASE_USE_ITEM, new BlockPos(-0.8, -0.8, -0.8), EnumFacing.DOWN));
            mc.playerController.processRightClick(mc.player, mc.world, EnumHand.OFF_HAND);
            timerHelper.reset();
        }
    }
    
    @EventTarget
    public void onUpdate(EventUpdate event) {
    	/*
    	if (target != null) {
    		if (target.getHeldItemMainhand().getItem() instanceof ItemAxe) {
                if (mc.gameSettings.keyBindUseItem.isKeyDown()) {
                    mc.gameSettings.keyBindUseItem.pressed = false;
                }
            } else {
                mc.gameSettings.keyBindUseItem.pressed = Mouse.isButtonDown(1);
            }
    	}*/
    }
    
    public void breakShield(EntityLivingBase tg) {
        if (InventoryHelper.doesHotbarHaveAxe()) {
            int item = InventoryHelper.getAxe();
            if (InventoryHelper.getAxe() >= 0 && tg instanceof EntityPlayer && tg.isHandActive() && tg.getActiveItemStack().getItem() instanceof ItemShield) {
                mc.player.connection.sendPacket(new CPacketHeldItemChange(item));
                mc.playerController.attackEntity(mc.player, EntityHelper.rayCast(target, calculateRange()));
                mc.player.swingArm(EnumHand.MAIN_HAND);
                mc.player.connection.sendPacket(new CPacketHeldItemChange(mc.player.inventory.currentItem));
            }
        }
    }
    
    @EventTarget
    public void onSendPacket(final EventPacket event) {
    	if (event.getPacket() instanceof SPacketPlayerPosLook) {
            final SPacketPlayerPosLook packet1 = (SPacketPlayerPosLook)event.getPacket();
            mc.player.rotationYaw = packet1.getYaw();
            mc.player.rotationPitch = packet1.getPitch();
        }
    }
    
    @EventTarget
    public void onRotations(EventPreMotionUpdate event) {
        if (isToggled()) {
            if (target != null) {
                if (target.getHealth() > 0.0f) {
                	 final float[] matrix = rotations(target);
                	 
                     event.setYaw(matrix[0]);
                     event.setPitch(matrix[1]);
                     KillAura.yaw = matrix[0];
                     KillAura.mc.player.renderYawOffset = matrix[0];
                     KillAura.mc.player.rotationYawHead = matrix[0];
                     KillAura.mc.player.rotationPitchHead = matrix[1];
                }
            }    
        }

    }

    @EventTarget
    public void onRender2D(EventRender2D e) {
    	if (this.progress2 < 1.0f) {
     		 this.progress2 = (System.currentTimeMillis() - this.lastMS) / 250.0f;
	} else {
		this.progress2 = 1.0f;
	}
	
	if (progress2 >= 0.7f) {
		if (this.progress < 1.0f) {
    		 this.progress = (System.currentTimeMillis() - this.lastMS) / 550.0f;
		} else {
			this.progress = 1.0f;
		}
	}
	boolean a = progress2 >= 1.0f;
	
            if (target instanceof EntityPlayer) {
            	final float x = TargetHudComponent.x;
                final float y = TargetHudComponent.y;
                int color = 15;
                double hpWidth = (target.getHealth() / target.getMaxHealth() * 78);
                this.healthBarWidth = AnimationHelper.animate(hpWidth, this.healthBarWidth, 3 * Feature.deltaTime());
                RoundedUtil.drawGradientHorizontal(x + 182 - 60 * progress2, y - 13.5f * progress2, (mc.mntsb_20.getStringWidth(target.getName()) > 60 ? mc.mntsb_20.getStringWidth(target.getName()) + 60 : 60 + 70) * progress2, 9.5f + 30 * progress2, 7, ClientHelper.getClientColor().darker(), ClientHelper.getClientColor());
                
                GlStateManager.pushMatrix();
                GlStateManager.enable(GL11.GL_SCISSOR_TEST);
                RenderUtils.scissorRect(x + 182 - 60, y - 13.5f, x + (mc.mntsb_20.getStringWidth(target.getName()) > 60 ? mc.mntsb_20.getStringWidth(target.getName()) + 115 : 115 + 70) - 60 + 128, y - 13.5f + 9.5f + 30);
                if (!target.getName().isEmpty()) {
                	Util.drawHead2(Objects.requireNonNull(mc.getConnection()).getPlayerInfo(target.getUniqueID()).getLocationSkin(), (int) ((int) x + 216 + (mc.mntsb_20.getStringWidth(target.getName()) > 60 ? mc.mntsb_20.getStringWidth(target.getName()) + 30 : 30 + 70) - 100 * progress), (int) (y - 9f));
                }
                mc.mntsb_13.drawStringWithShadow("Distance: " + String.format("%.1f", Float.valueOf(mc.player.getDistanceToEntity(target))), x + 101.0f - 70 + 105.0f * progress - mc.neverlose500_16.getStringWidth(String.valueOf((int) target.getHealth() / 2.0f)) / 2.0f, y + 5.5f, -1);
                mc.mntsb_20.drawStringWithShadow(target.getName(), x + 128 - 105 + 105 * progress, y - 7.0f, -1);
                mc.getRenderItem().renderItemOverlays(mc.neverlose500_18, target.getHeldItem(EnumHand.OFF_HAND), (int) x + 228, (int) y - 35);
                mc.getRenderItem().renderItemIntoGUI(target.getHeldItem(EnumHand.OFF_HAND), (int)  x + 222, (int) y - 35);
                
                //DrawHelper.drawGradientRect1(x - 1 + 160 - 32 - 105 + 105 * progress, y + 13.0f - 1, x + 1 - 105 + 105 * progress + 160.0f + (78 - 32), y + 1 + 20.0f, ClientHelper.getClientColor().darker().getRGB(), ClientHelper.getClientColor().darker().getRGB());
                
                if (target.hurtTime > 0) {
                DrawHelper.drawTriangle((float) (x - 105 + 105 * progress + 160.0f + (healthBarWidth - 32)) - 4.5f, y + 8, 4.0F, 4.0F, new Color(50, 50, 50, 255 * target.hurtTime / 10).getRGB(), new Color(50, 50, 50, 255 * target.hurtTime / 10).getRGB());
                RenderUtils.drawFilledCircle((float) (x - 105 + 105 * progress + 160 + (healthBarWidth - 32.5f)), (int) (y + 6), 4, new Color(50, 50, 50, 255 * target.hurtTime / 10));
                DrawHelper.drawGradientRect1(x, y, x, y, ClientHelper.getClientColor().getRGB(), ClientHelper.getClientColor().brighter().getRGB());
                mc.mntsb_10.drawCenteredString("" + (int) target.getHealth(), (float) (x - 105 + 105 * progress + 160 + (healthBarWidth - 32.5f)), (int) (y + 6), -1);
                }
                
                DrawHelper.drawGradientRect1(x + 160 - 32 - 105 + 105 * progress, y + 13.0f, x - 105 + 105 * progress + 160.0f + (healthBarWidth - 32), y + 20.0f, ClientHelper.getClientColor().getRGB(), ClientHelper.getClientColor().brighter().getRGB());
                
                GlStateManager.disable(GL11.GL_SCISSOR_TEST);
                GlStateManager.popMatrix();
                
            } else {
            	 ScaledResolution sr = new ScaledResolution(mc);
            	 GlStateManager.pushMatrix();
                 GlStateManager.enable(GL11.GL_SCISSOR_TEST);
                 RenderUtils.scissorRect(0, 0,  sr.getScaledWidth(), sr.getScaledHeight());
                 
            	GlStateManager.disable(GL11.GL_SCISSOR_TEST);
                GlStateManager.popMatrix();
                this.healthBarWidth = 92.0;
                target = null;
            }
    }
    
    private void attackEntitySuccess(EntityLivingBase target) {
        if (target.getHealth() > 0) {
            if ((mc.player.getCooledAttackStrength(0.5f) >= (0.95f) || (target.getHealth() <= 1 && mc.player.ticksExisted % 5 == 0))  && mc.player.getDistanceToEntity(target) <= (Jesus.inWater ? calculateRange() : calculateRange() - 1)) {
            	if (snap.getBoolValue()) {
            		float[] rotVisual = RotationHelper.getMatrixRotations(target, false, 2, 2);
    				mc.player.rotationYaw = rotVisual[0];
                    mc.player.rotationYaw = rotVisual[0];
                    mc.player.rotationPitch = rotVisual[1];
                    mc.player.rotationPitch = rotVisual[1];
            	}
                mc.player.connection.sendPacket(new CPacketEntityAction(mc.player, CPacketEntityAction.Action.STOP_SPRINTING));
                mc.playerController.attackEntity(mc.player, EntityHelper.rayCast(target, calculateRange()));
                mc.player.swingArm(EnumHand.MAIN_HAND);
                if (hitCounter > 1) {
                	breakShield(target);
                }
            	mc.player.connection.sendPacket(new CPacketEntityAction(mc.player, CPacketEntityAction.Action.START_SPRINTING));
                hitCounter++;
        	}
        }
    }
    
    @EventTarget
    public void onEventPreMotion(EventPreMotionUpdate mamanooma) {
        if (isToggled()) {
            if (Minecraft.getMinecraft().player.isEntityAlive()) {
            	boolean a = false;
                if (!AutoTotem.checkCrystal.getBoolValue()) {
                    a = false;
                }
                for (final Entity entity : mc.world.loadedEntityList) {
                    if (entity instanceof EntityEnderCrystal && mc.player.getDistanceToEntity(entity) <= 8) {
                    		a = true;
                    }
                }
                
                if (a) {
                	if (crysSafe.getBoolValue())
                	mc.player.motionY -= 1000;
                }
                target = getSortEntities();
                if (target == null) {
                    return;
                }
                if (target.getHealth() > 0.0f) {
                	BlockPos blockPos = new BlockPos(mc.player.posX, mc.player.posY - 0.1, mc.player.posZ);
                    Block block = mc.world.getBlockState(blockPos).getBlock();
                	if (!Jesus.inWater) {
                		if (!(mc.player.onGround && mc.player.fallDistance == 0 && !mc.gameSettings.keyBindJump.isKeyDown()) && target.getHealth() > 2) {
                			if (!MovementHelper.isBlockAboveHead()) {
                  		      if (!(mc.player.fallDistance >= 0.08f || block instanceof BlockLiquid || mc.player.isRiding() || mc.player.isOnLadder() || mc.player.isInLiquid() || mc.player.isInWeb)) {
                                    mc.player.connection.sendPacket(new CPacketEntityAction(mc.player, CPacketEntityAction.Action.STOP_SPRINTING));
                                    return;
                                }
                            } else if (!(!(mc.player.fallDistance > 0.0f) || mc.player.onGround || mc.player.isRiding() || mc.player.isOnLadder() || mc.player.isInLiquid() || mc.player.isInWeb)) {
                                mc.player.connection.sendPacket(new CPacketEntityAction(mc.player, CPacketEntityAction.Action.STOP_SPRINTING));
                                return;
                            }
                		}
                	}
                	
                    attackEntitySuccess(target);
                }
            }
        }
    }
    
    public EntityLivingBase getSortEntities() {
        final List<EntityLivingBase> e2 = new ArrayList<EntityLivingBase>();
        for (final Entity e3 : KillAuraHelper.mc.world.loadedEntityList) {
            if (e3 instanceof EntityLivingBase) {
                final EntityLivingBase player = (EntityLivingBase)e3;
                if (mc.player.getDistanceToEntity(player) >= calculateRange() + (snap.getBoolValue() ? 0 : 1) || !canAttack(player)) {
                    continue;
                }
                e2.add(player);
            }
        }

            e2.sort(Comparator.comparingDouble(mc.player::getDistanceToEntity));

        if (e2.isEmpty())
            return null;

        return e2.get(0);
    }
}
